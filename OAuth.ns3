Newspeak3
'Twitter'
class OAuth usingPlatform: platform = (
"Represents an OAuth Dictionary to be passed as a GET/POST args"|
	UUID = platform blackMarket UUID.
	Date = platform time Date.
	Time = platform time Time.
	Url = platform blackMarket Url.
	Association = platform collections Association.
	HMACSHA1 = platform blackMarket HMACSHA1 usingPlatform: platform.
	Curl = platform blackMarket Curl Curl usingPlatform: platform.
	CharacterReadWriteStream = platform streams CharacterReadWriteStream.
	Dictionary = platform collections Dictionary.
 	args
 requestTokenURL = 'https://api.twitter.com/oauth/request_token'.
 authorizeURL = 'https://api.twitter.com/oauth/authorize'.
 accessTokenURL = 'https://api.twitter.com/oauth/access_token'.
 callbackURL = 'oob'.
|self renew)
('as yet unclassified'
accessTokenPIN: pin token: token tokenSecret: tokenSecret= (
	^responseDictionary:(self at:'oauth_verifier' put:pin;
	at:'oauth_token' put:token;
	at:'oauth_token_secret' put:tokenSecret;
	post:accessTokenURL).
)
argString = (
	^ [:a | a first = $? ifTrue: [a allButFirst] ifFalse:[a]] value: (argString: args).
)
argString: t1 = ( 
	| t2 t3 |
	t1 isString
		ifTrue: [^ (t1 first = $?
				ifTrue: ['']
				ifFalse: ['?'])
				, t1].
	t2:: CharacterReadWriteStream on: String new.
	t2 nextPut: $?.
	t3:: true.
	t1
		associationsDo: [:t5 | 
					t3
						ifTrue: [t3:: false]
						ifFalse: [t2 nextPut: $&].
					t2 nextPutAll: t5 key encodeForHTTP.
					t2 nextPut: $=.
					t2 nextPutAll: t5 value encodeForHTTP].
	^ t2 contents.
	)
at: name put: value = (
	args at:name put: value.
)
authorize: token = (
	^ authorizeURL,'?oauth_token=',token.
)
currentPosixTime= (
	"This methods needs to comply with 
	((Platform nsPlatform Smalltalk globals at:#DateAndTime) now asUnixTime - (Platform nsPlatform OAuth usingPlatform:Platform nsPlatform) currentPosixTime)
	equals 0."
	|posixStart|
	posixStart:: (Date newDay:1 monthIndex:1 year:1970) subtractDays:4.
	^ (Date today julian - posixStart julian) * 3600 * 24 + Time now asSeconds.
)
get:url= (
	^ get:url usingKey:''.
)
get:url usingKey:key= (
	args at:'oauth_timestamp' put:((args at:'oauth_timestamp') asNumber + 10800) asString;
	at:'oauth_signature' put:(HMACSHA1 hash:(signableStringMethod:'GET' url:url) usingKey: oauth_consumer_secret,'&',key) base64Encoded.
	^ (Curl CurlRequest url: url, (argString: args))send;result.
	)
oauth_consumer_key = ( ^ 'MleeOFWZKrz5WZCjVbTMMA'.)
oauth_consumer_secret = ( ^ '7DD49O1t1ih8iyacjgw08IYk5SbBR66brZicYDh87I'.)
post:url= (
	^ post:url usingKey: ''.
)
post:url usingKey: key= (
	|string|
	args at:'oauth_timestamp' put:((args at:'oauth_timestamp') asNumber + 10800) asString;
	at:'oauth_signature' put:(HMACSHA1 hash:(signableStringMethod:'POST' url:url) usingKey: oauth_consumer_secret,'&',key) base64Encoded.
	
	^ (Curl CurlRequest url:url) postFields: argString; send; result.
)
renew = (
args::Dictionary new.
	args at:'oauth_version' put:'1.0';
	at:'oauth_signature_method' put:'HMAC-SHA1';
	at:'oauth_nonce' put:UUID new asString;
	at:'oauth_timestamp' put:currentPosixTime asString;
	at:'oauth_consumer_key' put: oauth_consumer_key
)
requestToken = (
	^ responseDictionary:(self at:'oauth_callback' put:callbackURL;
							post: requestTokenURL).
)
responseDictionary:response = (
	^ Dictionary withAll:((response contents findTokens:$&) collect:[:pair | [:a | Association key: a first value: a second] value: (pair findTokens:$=)]).
)
signableStringMethod: method url: url = (
	^  method,'&', url encodeForHTTP, '&', 
		((args keys asSortedList 
		collect:[:key | key encodeForHTTP,'=', (args at: key) encodeForHTTP]) 			fold:[:a :b | a, '&',b]) encodeForHTTP
)) : ('as yet unclassified'
testRequest = (
	"From http://term.ie/oauth/example/. Request Token test."
	|test|
	test:: OAuth new.
	test args at:'oauth_callback' put:'oob';
		at:'oauth_nonce' put:UUID new asString;
		at:'oauth_timestamp' put:(DateAndTime now asUnixTime asString asNumber + 10800) asString; "To test in GMT -3, we add 10800 seconds."
		at:'oauth_consumer_key' put:'key';
		at:'oauth_signature' put:(HTTPSocket hmacSha1:(test signableStringMethod:'POST' url:'http://term.ie/oauth/example/request_token.php') usingKey:'secret&') base64Encoded.
	^ (HTTPSocket HTTPSocket httpPost:'http://term.ie/oauth/example/request_token.php' args:test args accept:'*/*') contents = 'oauth_token=requestkey&oauth_token_secret=requestsecret'
)
testSignableStringMethod = (
"From https://dev.twitter.com/docs/auth/oauth"
|test|
	test:: OAuth new.
	test args at:'oauth_callback' put:'http://localhost:3005/the_dance/process_callback?service_provider_id=11';
		at: 'oauth_consumer_key' put:'GDdmIQH6jhtmLUypg82g';
		at: 'oauth_nonce' put:'QP70eNmVz8jvdPevU3oJD2AfF7R7odC2XJcn4XlZJqk';
		at: 'oauth_timestamp' put:'1272323042'.
	^  (test signableStringMethod:'POST' url:'https://api.twitter.com/oauth/request_token') =
'POST&https%3A%2F%2Fapi.twitter.com%2Foauth%2Frequest_token&oauth_callback%3Dhttp%253A%252F%252Flocalhost%253A3005%252Fthe_dance%252Fprocess_callback%253Fservice_provider_id%253D11%26oauth_consumer_key%3DGDdmIQH6jhtmLUypg82g%26oauth_nonce%3DQP70eNmVz8jvdPevU3oJD2AfF7R7odC2XJcn4XlZJqk%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1272323042%26oauth_version%3D1.0'
)
testSignature = (
	^ (HTTPSocket hmacSha1:'POST&https%3A%2F%2Fapi.twitter.com%2Foauth%2Frequest_token&oauth_callback%3Dhttp%253A%252F%252Flocalhost%253A3005%252Fthe_dance%252Fprocess_callback%253Fservice_provider_id%253D11%26oauth_consumer_key%3DGDdmIQH6jhtmLUypg82g%26oauth_nonce%3DQP70eNmVz8jvdPevU3oJD2AfF7R7odC2XJcn4XlZJqk%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1272323042%26oauth_version%3D1.0' usingKey:'MCD8BKwGdgPHvAuvgvz4EQpqDAtx89grbuNMRd7Eh98&') base64Encoded = '8wUi7m5HFQy76nowoCThusfgB+Q='
))